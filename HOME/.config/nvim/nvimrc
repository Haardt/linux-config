call plug#begin('$HOME/.config/nvim-plugins')
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } " autocomplete
Plug 'scrooloose/nerdtree' " FileBrowser
Plug 'scrooloose/nerdcommenter' " better commenting
Plug 'vim-syntastic/syntastic' " syntax check for most languages
Plug 'vim-airline/vim-airline' " better monitoring
Plug 'airblade/vim-gitgutter'
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-fugitive'
Plug 'jiangmiao/auto-pairs' " add eg. (->)
Plug 'christoomey/vim-tmux-navigator' " better tmux support
Plug 'kristijanhusak/vim-hybrid-material' " Dark Theme
Plug 'tpope/vim-surround' " Easy add matching parentheses
Plug 'ctrlpvim/ctrlp.vim' " use Fuzzy Finder to switch between Files (C-p)
Plug 'PotatoesMaster/i3-vim-syntax' " for syntax in i3 config file
Plug 'easymotion/vim-easymotion'
Plug 'mxw/vim-jsx'
" Plug 'w0rp/ale'
Plug 'udalov/kotlin-vim'
Plug 'farmergreg/vim-lastplace'
Plug 'Chiel92/vim-autoformat'
Plug 'christoomey/vim-system-copy'
Plug 'pgdouyon/vim-evanesco'
Plug 'Zaptic/elm-vim'
Plug 'mhinz/vim-startify'
Plug 'PProvost/vim-ps1'
Plug 'mechatroner/rainbow_csv'
" au BufWrite * :Autoformat " Autoformat destroys yaml's
noremap = :Autoformat<CR>
Plug 'autozimu/LanguageClient-neovim', {
      \   'branch': 'next',
      \   'do': 'bash install.sh',
      \ }

let g:LanguageClient_serverCommands = {
      \   'kotlin': ['kotlin-language-server'],
      \   'bash': ['bash-language-server', 'start'],
      \   'python': ['pyls'],
      \   'dockerfile': ['docker-langserver', '--stdio'],
      \   'java': ['java-language-server'],
      \   'yaml': ['yaml-language-server'],
      \ }

Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
let g:mkdp_browser = 'google-chrome-stable'

"
"
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
"
"function! s:check_back_space() abort
"  let col = col('.') - 1
"  return !col || getline('.')[col - 1]  =~# '\s'
"endfunction
"
"inoremap <silent><expr> <c-space> coc#refresh()
"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"

" call PlugInstall to install new plugins
call plug#end()
" basics
filetype plugin indent on
set number
set relativenumber
set incsearch
set ignorecase
set smartcase
set hlsearch
set tabstop=2
set softtabstop=0
set shiftwidth=2
set expandtab
set nobackup
set noswapfile
set nowrap
set undofile
set undodir=$HOME/.cache/nvim-undodir
set inccommand=nosplit

" fuzzy finding with vim
set path+=**
" Enable autocompletion:
set wildmode=longest,list,full
" Spell-check set to <leader>o, 'o' for 'orthography':
map <F6>d :setlocal spell! spelllang=de<CR>
map <F6>e :setlocal spell! spelllang=en_us<CR>

" preferences
" j/k will move virtual lines (lines that wrap)
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
" Stay in visual mode when indenting. You will never have to run gv after
" performing an indentation.
vnoremap < <gv
vnoremap > >gv
" Make Y yank everything from the cursor to the end of the line. This makes Y
" act more like C or D because by default, Y yanks the current line (i.e. the
" same as yy).
"noremap Y y$
" navigate split screens easily
" change spacing for language specific
"autocmd Filetype javascript setlocal ts=2 sts=2 sw=2

" plugin settings

" deoplete
let g:deoplete#enable_at_startup = 1
" use tab to forward cycle
"inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" use tab to backward cycle
"inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
" Close the documentation window when completion is done
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

" Theme
syntax enable
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
set termguicolors
set background=dark
colorscheme hybrid_material

"NERDTree
" How can I close vim if the only window left open is a NERDTree?
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" toggle NERDTree
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__', 'node_modules']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:NERDTreeShowHidden=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite

" jsx
let g:jsx_ext_required = 0
set guicursor=
