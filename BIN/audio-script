#!/usr/bin/env python3

import pulsectl
import notify2
import os
import dynmen

pulse = pulsectl.Pulse("audio-profile-switcher")
notify2.init("audio-profile-switcher")
info = pulse.server_info()
cards = pulse.card_list()
sinks = pulse.sink_list()
default_sink = info.default_sink_name
inputs = pulse.sink_input_list()


def dmenu(items, active_indices=None):
    args = ["dmenu", "-format", "i", "-i"]
    if active_indices:
        args += ["-a", ",".join([str(i) for i in active_indices])]
    menu = dynmen.Menu(args)

    try:
        return int(menu(items).selected)
    except dynmen.MenuError:
        return -1


def notify(title, message, timeout=2000):
    notification = notify2.Notification(title, message)
    notification.timeout = timeout
    notification.show()


def get_choice(items, item_name, name_getter, active_selector=None):
    if len(items) == 0:
        notify("Audio Script", f"No {item_name} available")
        return None
    elif len(items) == 1:
        item = items[0]
        notify("Audio Script", f"Chose '{name_getter(item)}', as it was the only {item_name}")
    else:
        names = [name_getter(it) for it in items]
        if active_selector is None:
            selection = dmenu(names)
        else:
            selection = dmenu(names, [index for index, sink in enumerate(items) if active_selector(sink)])

        if selection is None or selection < 0:
            return None

        item = items[selection]

    return item


def audio_profile():
    card = get_choice(cards, "card", lambda c: c.proplist["device.description"])

    if card is None:
        return

    profiles = card.profile_list

    profile = get_choice(profiles, "profile", lambda p: p.description, lambda p: p.name == card.profile_active.name)

    if profile is None:
        return

    pulse.card_profile_set(card, profile)


def audio_sink():
    sink = get_choice(sinks, "sink", lambda s: s.description, lambda s: s.name == default_sink)

    if sink is None:
        return

    pulse.sink_default_set(sink)

    for inp in inputs:
        pulse.sink_input_move(inp.index, sink.index)


def audio_program_sink():
    prog_input = get_choice(inputs, "source",
                            lambda i: f'{i.proplist["application.name"]} ({i.proplist["application.process.id"]})')

    if prog_input is None:
        return

    sink = get_choice(sinks, "sink", lambda s: s.description, lambda s: s.index == prog_input.sink)

    if sink is None:
        return

    pulse.sink_input_move(prog_input.index, sink.index)


def audio_script():
    scripts = list(options)
    scripts.remove("audio-script")
    print(f"Use one of the symlinked scripts: {', '.join(scripts)}")


options = {
    "audio-profile": audio_profile,
    "audio-sink": audio_sink,
    "audio-program-sink": audio_program_sink,
    "audio-script": audio_script,
}

options[os.path.basename(__file__)]()
